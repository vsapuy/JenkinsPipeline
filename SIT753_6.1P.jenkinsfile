pipeline {
    agent any
    environment {
        DIRECTORY_PATH = "/user/pipeline/code/directory"
        TESTING_ENVIRONMENT = "pipeline-testing-environment"
        PRODUCTION_ENVIRONMENT = "Victor Alvarado"
    }

    stages {
        stage('Build') {
            steps {
                echo 'Gradel started building the code...'
                echo "Gradel is compiling code"// Here, you would normally use a tool like Maven or Gradle.
                sleep(time: 5, unit: 'SECONDS')
                echo "Gradel is packaging code"
                sleep(time: 5, unit: 'SECONDS')
                echo 'Gradel completed building process!'
                
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                echo 'TesNG running Unit and Integration Tests...'
                echo "Starting unit tests..."
                echo 'Unit Tests: Assertions, Mocking'
                sleep(time: 2, unit: 'SECONDS')
                echo "Starting parameterized tests..."
                echo 'Parameterized Tests: Data-driven testing'
                sleep(time: 2, unit: 'SECONDS')
                echo "Test configuration started..."
                echo "Testing environment: Local"
                echo "Starting integration tests..."
                echo 'Integration Tests: Dependancies, Databases, Order of Execution, APIs,..'
                echo "Testing Dependancies..."
                echo "Testing Databases..."
                echo "Testing APIs..."
                echo "Order of Execution tests..."
                echo "Test Report generated..."
                sleep(time: 2, unit: 'SECONDS')
                echo 'TesNG completed Unit and Integration Tests!'
            }
            post {
                success {
                    emailext(
                        to: "vsapuy.edu@gmail.com",
                        subject: "Unit and Integration Tests were: ${currentBuild.currentResult}",
                        body: """<p>Unit and Integration Tests were successful!</p>
                                 <p>Check the attached log for details.</p>""",
                        attachLog : true 
                    )
                    
                }
            }
        }

        stage('Code Analysis') {
            steps {
                echo 'Performing Code Analysis with SonarQube...'
                echo "Code Smell Detection.. checking for suboptimal code"
                echo "Bug Detection.. checking for errors"
                echo "Code Duplication Detection.. checking for repeated code"
                echo "Code Coverage Detection.. measuring the percentage per unit"
                echo "Security Vulnerability Detection.. checking for security issues"
                echo "Security Hotspot Identification.. checking for security hotspots"
                echo "Code Complexity Detection"
                echo "Code Complexity Analysis.. checking for complex code"
                echo "Code Cognitive Complexity Detection.. checking for complex code to understand"
                echo "Code Debt Detection..."
                sleep(time: 5, unit: 'SECONDS')
                echo "Code Debt Estimation. assigning debt value per issue.."
                echo "Technical Debt ratio.. calculating the debt ratio to the Project"
                echo "Coding Standards Detection.. checking for coding standards flaws"
                echo "Code Analysis by SonarQube has Finished."
                
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Performing Security Scan...with OWSAP'
                echo 'OWASP Dependency-Check'
                echo 'Scanning for knonw vulnerabilities...'
                echo "Generate Dependency Reports.."
                echo "Version and Update Suggestions: Update to the latest version"
                echo "False Positive Identification"
                echo "Generating Detailed Automated Vulnerability Reports.."
                echo 'Security Scan has Finished.'
            }
            post {
                success {

                    emailext(
                        to: "vsapuy.edu@gmail.com",
                        subject: "The Security Scan tests were - ${currentBuild.currentResult}",
                        body: """<p>Unit and Integration Tests were ${currentBuild.currentResult}</p>
                                 <p>Check the attached log for details.</p>""",
                        attachLog: true
                    )

                    
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to Staging...'
                echo "Prepare the Staging Environment...on AWS CLI"
                echo "Create AWS resources for Staging Environment"
                echo "Deploying EC2 Intances, S3 Buckets, RDS Databases, VPC settings and environment variables..."
                echo "Buildijng the Application for Staging Environment..."
                echo "Deploying the Application to Staging Environment..."
                echo "Configuring staging environment..."
                echo "Starting environment configuration..."
                echo "Load Balancer Configuration..."
                echo "DNS Configuration..."
                echo "SSL Configuration..."
                echo "Validate deployment..."
                echo "Health Check, and application logs.."
                echo "Set up monitoring and alerting..."
                echo "CloudWatch Alarms and Enabling Detailed Monitoring...in EC2 Instances"
                echo 'AWS CLI has Finished Deploy to Staging.'
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                echo 'Running Integration Tests on Staging...'
                echo "Starting integration tests..."
                echo 'Integration Tests: Dependancies, Databases, Order of Execution, APIs,..'
                echo "Testing Dependancies..."
                echo "Testing Databases..."
                echo "Testing APIs..."
                echo "Order of Execution tests..."
                echo "Test Report generated..."
                sleep time: 2, unit: 'SECONDS'
                echo 'TesNG completed Integration Tests on Staging!'

            }
        }

        stage('Deploy to Production') {
            steps {
                echo 'Deploying to Production...on AWS CLI'
                echo "Approval required to deploy to Production..."
                sleep(time: 10, unit: 'SECONDS')
                echo "Prepare the Production Environment..."
                echo "Create AWS resources for Production Resources: EC2 instances, S3 buckets, RDS databases, VPC configurations..."
                echo "Securing Environment Variables and Secretes..."
                echo "Deploying the Application to Production Environment..."
                echo "Deploying EC2 Intances, S3 Buckets, RDS Databases, VPC settings and environment variables..."
                echo "Validation and Testing..."
                echo "Health Check, Smoke testing, and application logs.."
                echo "Set up monitoring and alerting...Setting Up CloudWatch Alarms and Enabling Detailed Monitoring...in EC2 Instances"
                echo 'AWS CLI has Finished Deploy to Production.'
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
            echo 'Sending email notification...'
            echo "Roll Back in Progress..."
            emailext(
                to: "vsapuy.edu@gmail.com",
                subject: "Pipeline Status - ${currentBuild.currentResult}",
                body: "The Pipeline has ${currentBuild.currentResult}."
                //attachLog: true
            )
        }
    }
}
